<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Monogame.Processing</name>
    </assembly>
    <members>
        <member name="F:Monogame.Processing.Filter.THRESHOLD">
            <summary>
            Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.
            </summary>
        </member>
        <member name="F:Monogame.Processing.Filter.GRAY">
            <summary>
            Converts any colors in the image to grayscale equivalents. No parameter is used
            </summary>
        </member>
        <member name="F:Monogame.Processing.Filter.OPAQUE">
            <summary>
            Sets the alpha channel to entirely opaque. No parameter is used.
            </summary>
        </member>
        <member name="F:Monogame.Processing.Filter.INVERT">
            <summary>
            Sets each pixel to its inverse value. No parameter is used.
            </summary>
        </member>
        <member name="F:Monogame.Processing.Filter.POSTERIZE">
            <summary>
            Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.
            </summary>
        </member>
        <member name="F:Monogame.Processing.Filter.BLUR">
            <summary>
            Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur.
            </summary>
        </member>
        <member name="F:Monogame.Processing.Filter.ERODE">
            <summary>
            Reduces the light areas. No parameter is used.
            </summary>
        </member>
        <member name="F:Monogame.Processing.Filter.DILATE">
            <summary>
            Increases the light areas. No parameter is used.
            </summary>
        </member>
        <member name="T:Monogame.Processing.Processing">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.rectMode(Monogame.Processing.ShapeMode)">
            <summary>
            Modifies the location from which rectangles are drawn by changing the way in which 
            parameters given to rect() are interpreted. 
            The default mode is rectMode(CORNER), which interprets the first two parameters of 
            rect() as the upper-left corner of the shape, while the third and fourth parameters 
            are its width and height. 
            rectMode(CORNERS) interprets the first two parameters of 
            rect() as the location of one corner, and the third and fourth parameters as the 
            location of the opposite corner. 
            rectMode(CENTER) interprets the first two parameters 
            of rect() as the shape's center point, while the third and fourth parameters are its 
            width and height. 
            rectMode(RADIUS) also uses the first two parameters of rect() as 
            the shape's center point, but uses the third and fourth parameters to specify half 
            of the shapes's width and height.
            </summary>
            <param name="mode">int: either CORNER, CORNERS, CENTER, or RADIUS</param>
        </member>
        <member name="M:Monogame.Processing.Processing.rectMode(System.Int32)">
            <summary>
            Modifies the location from which rectangles are drawn by changing the way in which 
            parameters given to rect() are interpreted. 
            The default mode is rectMode(CORNER), which interprets the first two parameters of 
            rect() as the upper-left corner of the shape, while the third and fourth parameters 
            are its width and height. 
            rectMode(CORNERS) interprets the first two parameters of 
            rect() as the location of one corner, and the third and fourth parameters as the 
            location of the opposite corner. 
            rectMode(CENTER) interprets the first two parameters 
            of rect() as the shape's center point, while the third and fourth parameters are its 
            width and height. 
            rectMode(RADIUS) also uses the first two parameters of rect() as 
            the shape's center point, but uses the third and fourth parameters to specify half 
            of the shapes's width and height.
            </summary>
            <param name="mode">int: either CORNER, CORNERS, CENTER, or RADIUS</param>
        </member>
        <member name="M:Monogame.Processing.Processing.ellipseMode(System.Int32)">
            <summary>
            Modifies the location from which ellipses are drawn by changing the way in which 
            parameters given to ellipse() are interpreted.The default mode is ellipseMode(CENTER), 
            which interprets the first two parameters of ellipse() as the shape's center point, 
            while the third and fourth parameters are its width and height. 
            ellipseMode(RADIUS) also uses the first two parameters of ellipse() as the shape's
             center point, but uses the third and fourth parameters to specify half of the shapes's 
            width and height.
            ellipseMode(CORNER) interprets the first two parameters of ellipse() as the upper-left 
            corner of the shape, while the third and fourth parameters are its width and height.
            ellipseMode(CORNERS) interprets the first two parameters of ellipse() as the location
             of one corner of the ellipse's bounding box, and the third and fourth parameters as the 
            location of the opposite corner.
            </summary>
            <param name="mode">int: either CENTER, RADIUS, CORNER, or CORNERS</param>
        </member>
        <member name="M:Monogame.Processing.Processing.ellipseMode(Monogame.Processing.ShapeMode)">
            <summary>
            Modifies the location from which ellipses are drawn by changing the way in which 
            parameters given to ellipse() are interpreted.The default mode is ellipseMode(CENTER), 
            which interprets the first two parameters of ellipse() as the shape's center point, 
            while the third and fourth parameters are its width and height. 
            ellipseMode(RADIUS) also uses the first two parameters of ellipse() as the shape's
             center point, but uses the third and fourth parameters to specify half of the shapes's 
            width and height.
            ellipseMode(CORNER) interprets the first two parameters of ellipse() as the upper-left 
            corner of the shape, while the third and fourth parameters are its width and height.
            ellipseMode(CORNERS) interprets the first two parameters of ellipse() as the location
             of one corner of the ellipse's bounding box, and the third and fourth parameters as the 
            location of the opposite corner.
            </summary>
            <param name="mode">int: either CENTER, RADIUS, CORNER, or CORNERS</param>
        </member>
        <member name="M:Monogame.Processing.Processing.abs(System.Int32)">
            <summary>
            Calculates the absolute value (magnitude) of a number. The absolute 
            value of a number is always positive.
            </summary>
            <param name="n">int: number to compute</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.abs(System.Single)">
            <summary>
            Calculates the absolute value (magnitude) of a number. The absolute 
            value of a number is always positive.
            </summary>
            <param name="n">float: number to compute</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.ceil(System.Single)">
            <summary>
            Calculates the closest int value that is greater than or equal to the 
            value of the parameter. For example, ceil(9.03) returns the value 10.
            </summary>
            <param name="n">float: number to round up</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.constrain(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constrains a value to not exceed a maximum and minimum value.
            </summary>
            <param name="amt">int: the value to constrain</param>
            <param name="low">int: minimum limit</param>
            <param name="high">	int: maximum limit</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.constrain(System.Single,System.Single,System.Single)">
            <summary>
            Constrains a value to not exceed a maximum and minimum value.
            </summary>
            <param name="amt">float: the value to constrain</param>
            <param name="low">float: minimum limit</param>
            <param name="high">float: maximum limit</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.dist(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the distance between two points.
            </summary>
            <param name="x1">float: x-coordinate of the first point</param>
            <param name="y1">float: y-coordinate of the first point</param>
            <param name="x2">float: x-coordinate of the second point</param>
            <param name="y2">float: y-coordinate of the second point</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.dist(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the distance between two points.
            </summary>
            <param name="x1">float: x-coordinate of the first point</param>
            <param name="y1">float: y-coordinate of the first point</param>
            <param name="z1">float: z-coordinate of the first point</param>
            <param name="x2">float: x-coordinate of the second point</param>
            <param name="y2">float: y-coordinate of the second point</param>
            <param name="z2">float: z-coordinate of the second point</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.exp(System.Single)">
            <summary>
            Returns Euler's number e (2.71828...) raised to the power of 
            the n parameter.
            </summary>
            <param name="n">float: exponent to raise</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.floor(System.Single)">
            <summary>
            Calculates the closest int value that is less than or equal 
            to the value of the parameter.
            </summary>
            <param name="n">float: number to round down</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.lerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates a number between two numbers at a specific increment. 
            The amt parameter is the amount to interpolate between the two 
            values where 0.0 equal to the first point, 0.1 is very near the 
            first point, 0.5 is half-way in between, etc. The lerp function 
            is convenient for creating motion along a straight path and for 
            drawing dotted lines.
            </summary>
            <param name="start">float: first value</param>
            <param name="stop">float: second value</param>
            <param name="amp">float: float between 0.0 and 1.0</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.log(System.Single)">
            <summary>
            Calculates the natural logarithm (the base-e logarithm) of a number. 
            This function expects the n parameter to be a value greater than 0.0.
            </summary>
            <param name="n">float: number greater than 0.0</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.mag(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the magnitude (or length) of a vector. A vector is a direction 
            in space commonly used in computer graphics and linear algebra. Because it 
            has no "start" position, the magnitude of a vector can be thought of as the 
            distance from the coordinate 0,0 to its x,y value. Therefore, mag() is a 
            shortcut for writing dist(0, 0, x, y).
            </summary>
            <param name="a">float: first value</param>
            <param name="b">float: second value</param>
            <param name="c">float: third value</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Re-maps a number from one range to another.
            </summary>
            <param name="value">float: the incoming value to be converted</param>
            <param name="start1">float: lower bound of the value's current range</param>
            <param name="stop1">float: upper bound of the value's current range</param>
            <param name="start2">float: lower bound of the value's target range</param>
            <param name="stop2">float: upper bound of the value's target range</param>
            <returns></returns>
        </member>
        <member name="M:Monogame.Processing.Processing.max(System.Single,System.Single,System.Single)">
            <summary>
            Determines the largest value in a sequence of numbers, and then returns that value. 
            max() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="a">float: first number to compare</param>
            <param name="b">float: second number to compare</param>
            <param name="c">float: third number to compare</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.max(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the largest value in a sequence of numbers, and then returns that value. 
            max() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="a">int: first number to compare</param>
            <param name="b">int: second number to compare</param>
            <param name="c">int: third number to compare</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.max(System.Single[])">
            <summary>
            Determines the largest value in a sequence of numbers, and then returns that value. 
            max() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="list">float[]: array of numbers to compare</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.max(System.Int32[])">
            <summary>
            Determines the largest value in a sequence of numbers, and then returns that value. 
            max() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="list">int[]: array of numbers to compare</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.min(System.Single,System.Single,System.Single)">
            <summary>
            Determines the smallest value in a sequence of numbers, and then returns that value. 
            min() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="a">float: first number to compare</param>
            <param name="b">float: second number to compare</param>
            <param name="c">float: third number to compare</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the smallest value in a sequence of numbers, and then returns that value. 
            min() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="a">int: first number to compare</param>
            <param name="b">int: second number to compare</param>
            <param name="c">int: third number to compare</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.min(System.Single[])">
            <summary>
            Determines the smallest value in a sequence of numbers, and then returns that value. 
            min() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="list">float[]: array of numbers to compare</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.min(System.Int32[])">
            <summary>
            Determines the smallest value in a sequence of numbers, and then returns that value. 
            min() accepts either two or three float or int values as parameters, or an array 
            of any length.
            </summary>
            <param name="list">int[]: array of numbers to compare</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.norm(System.Single,System.Single,System.Single)">
            <summary>
            Normalizes a number from another range into a value between 0 and 1. Identical to 
            map(value, low, high, 0, 1). Numbers outside of the range are not clamped to 0 and 1, 
            because out-of-range values are often intentional and useful.
            </summary>
            <param name="value">float: the incoming value to be converted</param>
            <param name="start">float: lower bound of the value's current range</param>
            <param name="stop">	float: upper bound of the value's current range</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.pow(System.Single,System.Single)">
            <summary>
            Facilitates exponential expressions. The pow() function is an efficient way of 
            multiplying numbers by themselves (or their reciprocals) in large quantities. 
            For example, pow(3, 5) is equivalent to the expression 3*3*3*3*3 and pow(3, -5) 
            is equivalent to 1 / 3*3*3*3*3.
            </summary>
            <param name="n">float: base of the exponential expression</param>
            <param name="e">float: power by which to raise the base</param>
            <returns></returns>
        </member>
        <member name="M:Monogame.Processing.Processing.round(System.Single)">
            <summary>
            Calculates the integer closest to the n parameter. 
            For example, round(133.8) returns the value 134.
            </summary>
            <param name="n">float: number to round</param>
            <returns>int</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.sq(System.Single)">
            <summary>
            Squares a number (multiplies a number by itself). 
            The result is always a positive number, as multiplying 
            two negative numbers always yields a positive result. 
            For example, -1 * -1 = 1.
            </summary>
            <param name="n">float: number to square</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.sqrt(System.Single)">
            <summary>
            Calculates the square root of a number. The square root of a 
            number is always positive, even though there may be a valid 
            negative root. The square root s of number a is such that 
            s*s = a. It is the opposite of squaring.
            </summary>
            <param name="n">float: non-negative number</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.tint(System.Int32,System.Byte)">
            <summary>
            </summary>
            <param name="rgb">int: any value of the color datatype</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.tint(System.Single)">
            <summary>
            </summary>
            <param name="gray">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.tint(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="v1">float: red or hue value(depending on the current color mode) </param>
            <param name="v2">float: green or saturation value(depending on the current color mode) </param>
            <param name="v3">float: blue or brightness value (depending on the current color mode)</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.smooth(System.Int32)">
            <summary>
            Draws all geometry with smooth (anti-aliased) edges. This behavior is the default, 
            so smooth() only needs to be used when a program needs to set the smoothing in a 
            different way. The level parameter increases the level of smoothness. This is the 
            level of over sampling applied to the graphics buffer.
            </summary>
            <param name="level">int: either 2, 3, 4, or 8 depending on the renderer</param>
        </member>
        <member name="M:Monogame.Processing.Processing.noSmooth">
            <summary>
            Draws all geometry and fonts with jagged (aliased) edges and images when hard edges 
            between the pixels when enlarged rather than interpolating pixels. Note that smooth() 
            is active by default, so it is necessary to call noSmooth() to disable smoothing of 
            geometry, fonts, and images
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.size(System.Int32,System.Int32,System.Int32)">
            <summary>
            Defines the dimension of the display window width and height in units of pixels. In a 
            program that has the setup() function, the size() function must be the first line of
            code inside setup().
            </summary>
            <param name="width">int: width of the display window in units of pixels</param>
            <param name="height">int: height of the display window in units of pixels</param>
            <param name="renderer"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.background(Monogame.Processing.color,System.Single)">
            <summary>
            The background() function sets the color used for the background of the Processing window. 
            The default background is light gray. This function is typically used within draw() to clear 
            the display window at the beginning of each frame, but it can be used inside setup() to set 
            the background on the first frame of animation or if the background need only be set once. 
            </summary>
            <param name="rgb">int: any value of the color datatype</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.background(System.Single)">
            <summary>
            The background() function sets the color used for the background of the Processing window. 
            The default background is light gray. This function is typically used within draw() to clear 
            the display window at the beginning of each frame, but it can be used inside setup() to set 
            the background on the first frame of animation or if the background need only be set once. 
            </summary>
            <param name="gray">float: specifies a value between white and black</param>
        </member>
        <member name="M:Monogame.Processing.Processing.background(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The background() function sets the color used for the background of the Processing window. 
            The default background is light gray. This function is typically used within draw() to clear 
            the display window at the beginning of each frame, but it can be used inside setup() to set 
            the background on the first frame of animation or if the background need only be set once. 
            </summary>
            <param name="v1">float: red or hue value(depending on the current color mode) </param>
            <param name="v2">float: green or saturation value(depending on the current color mode) </param>
            <param name="v3">float: blue or brightness value (depending on the current color mode)</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.fill(System.Int32,System.Byte)">
            <summary>
            Sets the color used to fill shapes. For example, if you run fill(204, 102, 0), all subsequent 
            shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color
             depending on the current colorMode(). The default color space is RGB, with each value in the range
             from 0 to 255.  
            </summary>
            <param name="rgb">int: any value of the color datatype</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.fill(System.Single)">
            <summary>
            Sets the color used to fill shapes. For example, if you run fill(204, 102, 0), all subsequent 
            shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color
             depending on the current colorMode(). The default color space is RGB, with each value in the range
             from 0 to 255.
            </summary>
            <param name="gray">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.fill(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color used to fill shapes. For example, if you run fill(204, 102, 0), all subsequent 
            shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color
             depending on the current colorMode(). The default color space is RGB, with each value in the range
             from 0 to 255. 
            </summary>
            <param name="v1">float: red or hue value(depending on the current color mode) </param>
            <param name="v2">float: green or saturation value(depending on the current color mode) </param>
            <param name="v3">float: blue or brightness value (depending on the current color mode)</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.noFill">
            <summary>
            Disables filling geometry. If both noStroke() and noFill() are called, nothing will be drawn to the screen.
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.stroke(System.Int32,System.Single)">
            <summary>
            Sets the color used to draw lines and borders around shapes. This color is either specified in 
            terms of the RGB or HSB color depending on the current colorMode(). The default color space is 
            RGB, with each value in the range from 0 to 255  
            </summary>
            <param name="rgb">int: any value of the color datatype</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.stroke(System.Single)">
            <summary>
            Sets the color used to draw lines and borders around shapes. This color is either specified in 
            terms of the RGB or HSB color depending on the current colorMode(). The default color space is 
            RGB, with each value in the range from 0 to 255  
            </summary>
            <param name="gray">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.stroke(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color used to draw lines and borders around shapes. This color is either specified in 
            terms of the RGB or HSB color depending on the current colorMode(). The default color space is 
            RGB, with each value in the range from 0 to 255
            </summary>
            <param name="v1">float: red or hue value(depending on the current color mode) </param>
            <param name="v2">float: green or saturation value(depending on the current color mode) </param>
            <param name="v3">float: blue or brightness value (depending on the current color mode)</param>
            <param name="alpha">float: opacity of the background</param>
        </member>
        <member name="M:Monogame.Processing.Processing.strokeWeight(System.Single)">
            <summary>
            Sets the width of the stroke used for lines, points, and the border around shapes. 
            All widths are set in units of pixels.
            </summary>
            <param name="weight">float: the weight (in pixels) of the stroke</param>
        </member>
        <member name="M:Monogame.Processing.Processing.bezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a Bezier curve on the screen. These curves are defined by a series of anchor
            and control points. The first two parameters specify the first anchor point and the
            last two parameters specify the other anchor point. The middle parameters specify
            the control points which define the shape of the curve. Bezier curves were developed
            by French engineer Pierre Bezier. 
            </summary>
            <param name="x1">float: coordinates for the first anchor point</param>
            <param name="y1">float: coordinates for the first anchor point</param>
            <param name="x2">float: coordinates for the first control point</param>
            <param name="y2">float: coordinates for the first control point</param>
            <param name="x3">float: coordinates for the second control point</param>
            <param name="y3">float: coordinates for the second control point</param>
            <param name="x4">float: coordinates for the second anchor point</param>
            <param name="y4">float: coordinates for the second anchor point</param>
        </member>
        <member name="M:Monogame.Processing.Processing.curve(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a curved line on the screen. The first and second parameters specify the beginning
            control point and the last two parameters specify the ending control point. The middle
            parameters specify the start and stop of the curve. Longer curves can be created by putting
            a series of curve() functions together or using curveVertex(). An additional function called
            curveTightness() provides control for the visual quality of the curve. The curve() function
            is an implementation of Catmull-Rom splines.
            </summary>
            <param name="x1">float: coordinates for the beginning control point</param>
            <param name="y1">float: coordinates for the beginning control point</param>
            <param name="x2">float: coordinates for the first point</param>
            <param name="y2">float: coordinates for the first point</param>
            <param name="x3">float: coordinates for the second point</param>
            <param name="y3">float: coordinates for the second point</param>
            <param name="x4">float: coordinates for the ending control point</param>
            <param name="y4">float: coordinates for the ending control point</param>
        </member>
        <member name="M:Monogame.Processing.Processing.cursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.noCursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.textSize(System.Single)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.text(System.String,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.delay(System.Int32)">
            <summary>
            The delay() function halts for a specified time. Delay times are specified in thousandths of a second.
            For example, running delay(3000) will stop the program for three seconds and delay(500) will stop the
            program for a half-second.
            </summary>
            <param name="napTime">int: milliseconds to pause before running draw() again</param>
        </member>
        <member name="M:Monogame.Processing.Processing.push">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.pop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.pushMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.popMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.resetMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.applyMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="n00"></param>
            <param name="n01"></param>
            <param name="n02"></param>
            <param name="n03"></param>
            <param name="n10"></param>
            <param name="n11"></param>
            <param name="n12"></param>
            <param name="n13"></param>
            <param name="n20"></param>
            <param name="n21"></param>
            <param name="n22"></param>
            <param name="n23"></param>
            <param name="n30"></param>
            <param name="n31"></param>
            <param name="n32"></param>
            <param name="n33"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.applyMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="n00"></param>
            <param name="n01"></param>
            <param name="n02"></param>
            <param name="n10"></param>
            <param name="n11"></param>
            <param name="n12"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.printMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.print(System.Object[])">
            <summary>
            The print() function writes to the console area, the black rectangle at the bottom of the Processing
            environment. This function is often helpful for looking at the data a program is producing.
            The companion function println() works like print(), but creates a new line of text for each call to
            the function. More than one parameter can be passed into the function by separating them with commas.
            Alternatively, individual elements can be separated with quotes ("") and joined with the addition
            operator (+).
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.printLn(System.Object[])">
            <summary>
            The println() function writes to the console area, the black rectangle at the bottom of the Processing environment.
            This function is often helpful for looking at the data a program is producing. Each call to this function creates
            a new line of output. More than one parameter can be passed into the function by separating them with commas.
            Alternatively, individual elements can be separated with quotes ("") and joined with the addition operator (+).
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.printArray(System.Object[])">
            <summary>
            The printArray() function writes array data to the text area of the Processing environment's
            console. A new line is put between each element of the array. This function can only print one
            dimensional arrays.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.pushStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.popStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.exit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.fullScreen">
            <summary>
            
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.redraw">
             <summary>
             Executes the code within draw() one time. This functions allows the program to update the
             display window only when necessary, for example when an event registered by mousePressed()
             or keyPressed() occurs.
            
             In structuring a program, it only makes sense to call redraw() within events such as
             mousePressed(). This is because redraw() does not run draw() immediately(it only sets a flag
             that indicates an update is needed).
            
             The redraw() function does not work properly when called inside draw(). To enable/disable
             animations, use loop() and noLoop().
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.noLoop">
             <summary>
             Stops Processing from continuously executing the code within draw(). If loop() is called,
             the code in draw() begins to run continuously again. If using noLoop() in setup(), it should
             be the last line inside the block.
            
             When noLoop() is used, it's not possible to manipulate or access the screen inside event
             handling functions such as mousePressed() or keyPressed(). Instead, use those functions to
             call redraw() or loop(), which will run draw(), which can update the screen properly. This
             means that when noLoop() has been called, no drawing can happen, and functions like saveFrame()
             or loadPixels() may not be used.
            
             Note that if the sketch is resized, redraw() will be called to update the sketch, even after
             noLoop() has been specified.Otherwise, the sketch would enter an odd state until loop() was
             called.
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.loop">
            <summary>
            By default, Processing loops through draw() continuously, executing the code within it.
            However, the draw() loop may be stopped by calling noLoop(). In that case, the draw()
            loop can be resumed with loop().
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.FrameRate(System.Single)">
            <summary>
            Specifies the number of frames to be displayed every second. For example, the function call
            frameRate(30) will attempt to refresh 30 times a second. If the processor is not fast enough
            to maintain the specified rate, the frame rate will not be achieved. Setting the frame rate
            within setup() is recommended. The default rate is 60 frames per second.
            </summary>
            <param name="fps">float: number of desired frames per second</param>
        </member>
        <member name="M:Monogame.Processing.Processing.Setup">
             <summary>
             The setup() function is run once, when the program starts. It's used to define initial environment properties
             such as screen size and to load media such as images and fonts as the program starts. There can only be one
             setup() function for each program and it shouldn't be called again after its initial execution.
            
             If the sketch is a different dimension than the default, the size() function or fullScreen() function must be
             the first line in setup().
            
             Note: Variables declared within setup() are not accessible within other functions, including draw().
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.Draw">
            <summary>
            Called directly after setup(), the draw() function continuously executes the lines of code contained inside
            its block until the program is stopped or noLoop() is called. draw() is called automatically and should never
            be called explicitly. All Processing programs update the screen at the end of draw(), never earlier.
            
            To stop the code inside of draw() from running continuously, use noLoop(), redraw() and loop(). If noLoop()
            is used to stop the code in draw() from running, then redraw() will cause the code inside draw() to run a
            single time, and loop() will cause the code inside draw() to resume running continuously.
            
            The number of times draw() executes in each second may be controlled with the frameRate() function.
            
            It is common to call background() near the beginning of the draw() loop to clear the contents of the window,
            as shown in the first example above. Since pixels drawn to the window are cumulative, omitting background()
            may result in unintended results.
            
            There can only be one draw() function for each sketch, and draw() must exist if you want the code to run
            continuously, or to process events such as mousePressed(). Sometimes, you might have an empty call to draw()
            in your program, as shown in the second example above.
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.Thread">
             <summary>
             Processing sketches follow a specific sequence of steps: setup() first, followed by draw() over and over and
             over again in a loop. A thread is also a series of steps with a beginning, a middle, and an end. A Processing
             sketch is a single thread, often referred to as the "Animation" thread. Other threads' sequences, however, can
             run independently of the main animation loop. In fact, you can launch any number of threads at one time, and they
             will all run concurrently.
             
             You cannot draw to the screen from a function called by thread(). Because it runs independently, the code will
             not be synchronized to the animation thread, causing strange or at least inconsistent results.Use thread() to
             load files or do other tasks that take time.When the task is finished, set a variable that indicates the task
             is complete, and check that from inside your draw() method.
             
             Processing uses threads quite often, such as with library functions like captureEvent() and movieEvent(). These
             functions are triggered by a different thread running behind the scenes, and they alert Processing whenever they
             have something to report.This is useful when you need to perform a task that takes too long and would slow down
             the main animation's frame rate, such as grabbing data from the network. If a separate thread gets stuck or has
             an error, the entire program won't grind to a halt, since the error only stops that individual thread.
            
             Writing your own thread can be a complex endeavor that involves extending the Java Thread class. However, the
             thread() method is a quick and dirty way to implement a simple thread in Processing.By passing in a String that
             matches the name of a function declared elsewhere in the sketch, Processing will execute that function in a separate
             thread.
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.MousePressed">
             <summary>
             The mousePressed() function is called once after every time a mouse button is pressed. The mouseButton variable
             (see the related reference entry) can be used to determine which button has been pressed.
            
             Mouse and keyboard events only work when a program has draw(). Without draw(), the code is only run once and then
             stops listening for events.
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.MouseReleased">
             <summary>
             The mouseReleased() function is called every time a mouse button is released.
            
             Mouse and keyboard events only work when a program has draw(). Without draw(), the code is only run once and then
             stops listening for events.
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.MouseMoved">
             <summary>
             The mouseMoved() function is called every time the mouse moves and a mouse button is not pressed. (If a button
             is being pressed, mouseDragged() is called instead.)
            
             Mouse and keyboard events only work when a program has draw(). Without draw(), the code is only run once and then
             stops listening for events.
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.MouseDragged">
            <summary>
            The mouseDragged() function is called once every time the mouse moves while a mouse button is pressed. (If a button
            is not being pressed, mouseMoved() is called instead.)
            
            Mouse and keyboard events only work when a program has draw(). Without draw(), the code is only run once and then
            stops listening for events.
            </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.MouseWheel(System.Int32)">
             <summary>
             The code within the mouseWheel() event function is run when the mouse wheel is moved. (Some mice don't have wheels
             and this function is only applicable with mice that have a wheel.) The getCount() function used within mouseWheel()
             returns positive values when the mouse wheel is rotated down (toward the user), and negative values for the other
             direction (up or away from the user). On OS X with "natural" scrolling enabled, the values are opposite.
            
             Mouse and keyboard events only work when a program has draw(). Without draw(), the code is only run once and then
             stops listening for events.
             </summary>
             <param name="count"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.MouseClicked">
             <summary>
             The mouseClicked() function is called after a mouse button has been pressed and then released.
            
             Mouse and keyboard events only work when a program has draw(). Without draw(), the code is only run once and then stops
             listening for events.
             </summary>
        </member>
        <member name="M:Monogame.Processing.Processing.KeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            The keyPressed() function is called once every time a key is pressed. The key that was pressed is stored in the key variable.
            </summary>
            <param name="pkey"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.KeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            The keyReleased() function is called once every time a key is released. The key that was released will be stored in the key
            variable. See key and keyCode for more information.
            </summary>
            <param name="pkey"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.KeyTyped(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            The keyTyped() function is called once every time a key is pressed, but action keys such as Ctrl, Shift, and Alt are ignored.
            </summary>
            <param name="pkey"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.arc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Monogame.Processing.ArcMode)">
            <summary>
            Draws an arc to the screen. Arcs are drawn along the outer edge of an ellipse defined
            by the a, b, c, and d parameters. The origin of the arc's ellipse may be changed with
            the ellipseMode() function. Use the start and stop parameters to specify the angles
            (in radians) at which to draw the arc. The start/stop values must be in clockwise order.
            
            There are three ways to draw an arc; the rendering technique used is defined by the optional
            seventh parameter.The three options, depicted in the above examples, are PIE, OPEN, and
            CHORD. The default mode is the OPEN stroke with a PIE fill.
            
             In some cases, the arc() function isn't accurate enough for smooth drawing. For example, the
            shape may jitter on screen when rotating slowly. If you're having an issue with how arcs are
            rendered, you'll need to draw the arc yourself with beginShape()/endShape() or a PShape.
            </summary>
            <param name="a">float: x-coordinate of the arc's ellipse</param>
            <param name="b">float: y-coordinate of the arc's ellipse</param>
            <param name="c">float: width of the arc's ellipse by default</param>
            <param name="d">float: height of the arc's ellipse by default</param>
            <param name="start">float: angle to start the arc, specified in radians</param>
            <param name="stop">float: angle to stop the arc, specified in radians</param>
            <param name="mode">int: OPEN, CHORD or PIE</param>
        </member>
        <member name="M:Monogame.Processing.Processing.ellipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse(oval) to the screen. An ellipse with equal width and height is a circle.
            By default, the first two parameters set the location, and the third and fourth parameters 
            set the shape's width and height. The origin may be changed with the ellipseMode() function. 
            </summary>
            <param name="a">float: x-coordinate of the ellipse</param>
            <param name="b">float: y-coordinate of the ellipse</param>
            <param name="c">float: width of the ellipse by default</param>
            <param name="d">float: height of the ellipse by default</param>
        </member>
        <member name="M:Monogame.Processing.Processing.circle(System.Single,System.Single,System.Single)">
            <summary>
            Draws a circle to the screen. By default, the first two parameters set the location of the
            center, and the third sets the shape's width and height. The origin may be changed with the
            ellipseMode() function.
            </summary>
            <param name="x">float: x-coordinate of the ellipse</param>
            <param name="y">float: y-coordinate of the ellipse</param>
            <param name="extent">float: width and height of the ellipse by default</param>
        </member>
        <member name="M:Monogame.Processing.Processing.rect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. 
            By default, the first two parameters set the location of the upper-left corner, the third sets 
            the width, and the fourth sets the height. The way these parameters are interpreted, however, may
             be changed with the rectMode() function.
            </summary>
            <param name="a">float: x-coordinate of the rectangle by default</param>
            <param name="b">float: y-coordinate of the rectangle by default</param>
            <param name="c">float: width of the rectangle by default</param>
            <param name="d">float: height of the rectangle by default</param>
        </member>
        <member name="M:Monogame.Processing.Processing.line(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line (a direct path between two points) to the screen. The version of line() with 
            four parameters draws the line in 2D. To color a line, use the stroke() function. A line 
            cannot be filled, therefore the fill() function will not affect the color of a line. 2D lines 
            are drawn with a width of one pixel by default, but this can be changed with the strokeWeight() 
            function.
            </summary>
            <param name="x1">float: x-coordinate of the first point</param>
            <param name="y1">float: y-coordinate of the first point</param>
            <param name="x2">float: x-coordinate of the second point</param>
            <param name="y2">float: y-coordinate of the second point</param>
        </member>
        <member name="M:Monogame.Processing.Processing.quad(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles 
            between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) 
            sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise 
            around the defined shape.
            </summary>
            <param name="x1">float: x-coordinate of the first corner</param>
            <param name="y1">float: y-coordinate of the first corner</param>
            <param name="x2">float: x-coordinate of the second corner</param>
            <param name="y2">float: y-coordinate of the second corner</param>
            <param name="x3">float: x-coordinate of the third corner</param>
            <param name="y3">float: y-coordinate of the third corner</param>
            <param name="x4">float: x-coordinate of the fourth corner</param>
            <param name="y4">float: y-coordinate of the fourth corner</param>
        </member>
        <member name="M:Monogame.Processing.Processing.triangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A triangle is a plane created by connecting three points. The first 
            two arguments specify the first point, the middle two arguments 
            specify the second point, and the last two arguments specify the 
            third point
            </summary>
            <param name="x1">float: x-coordinate of the first point</param>
            <param name="y1">float: y-coordinate of the first point</param>
            <param name="x2">float: x-coordinate of the second point</param>
            <param name="y2">float: y-coordinate of the second point</param>
            <param name="x3">float: x-coordinate of the third point</param>
            <param name="y3">float: y-coordinate of the third point</param>
        </member>
        <member name="M:Monogame.Processing.Processing.point(System.Single,System.Single,System.Single)">
            <summary>
            Draws a point, a coordinate in space at the dimension of one pixel. 
            The first parameter is the horizontal value for the point, the 
            second value is the vertical value for the point
            </summary>
            <param name="x">float: x-coordinate of the point</param>
            <param name="y">float: y-coordinate of the point</param>
            <param name="z">float: z-coordinate of the point</param>
        </member>
        <member name="M:Monogame.Processing.Processing.random(System.Single,System.Single)">
            <summary>
            Generates random numbers. Each time the random() function is called, 
            it returns an unexpected value within the specified range. If only 
            one parameter is passed to the function, it will return a float between 
            zero and the value of the high parameter. For example, random(5) returns 
            values between 0 and 5 (starting at zero, and up to, but not including, 5).
            </summary>
            <param name="low">float: lower limit</param>
            <param name="high">float: upper limit</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.random(System.Single)">
            <summary>
            Generates random numbers. Each time the random() function is called, 
            it returns an unexpected value within the specified range. If only 
            one parameter is passed to the function, it will return a float between 
            zero and the value of the high parameter. For example, random(5) returns 
            values between 0 and 5 (starting at zero, and up to, but not including, 5).
            </summary>
            <param name="high">float: upper limit</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.randomSeed(System.Int32)">
            <summary>
            Sets the seed value for random(). By default, random() produces different results 
            each time the program is run. Set the seed parameter to a constant to return the 
            same pseudo-random numbers each time the software is run.
            </summary>
            <param name="seed">int: seed value</param>
        </member>
        <member name="M:Monogame.Processing.Processing.randomGaussian">
            <summary>
            Returns a float from a random series of numbers having a mean of 0 and standard
            deviation of 1. Each time the randomGaussian() function is called, it returns a
            number fitting a Gaussian, or normal, distribution. There is theoretically no minimum
            or maximum value that randomGaussian() might return. Rather, there is just a very
            low probability that values far from the mean will be returned; and a higher
            probability that numbers near the mean will be returned.
            </summary>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.noise(System.Single,System.Single,System.Single)">
            <summary>
            	Returns the Perlin noise value at specified coordinates. Perlin noise is a random
            sequence generator producing a more natural, harmonic succession of numbers than that of
            the standard random() function. It was developed by Ken Perlin in the 1980s and has been
            used in graphical applications to generate procedural textures, shapes, terrains, and other
            seemingly organic forms.
            </summary>
            <param name="x">float: x-coordinate in noise space</param>
            <param name="y">float: y-coordinate in noise space</param>
            <param name="z">float: z-coordinate in noise space</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.noiseDetail(System.Int32,System.Single)">
             <summary>
             Adjusts the character and level of detail produced by the Perlin noise function. Similar
             to harmonics in physics, noise is computed over several octaves. Lower octaves contribute
             more to the output signal and as such define the overall intensity of the noise, whereas
             higher octaves create finer-grained details in the noise sequence.
            
             By default, noise is computed over 4 octaves with each octave contributing exactly half
             than its predecessor, starting at 50% strength for the first octave.This falloff amount
             can be changed by adding an additional function parameter.For example, a falloff factor
             of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave.
             While any number between 0.0 and 1.0 is valid, note that values greater than 0.5 may result
             in noise() returning values greater than 1.0.
            
             By changing these parameters, the signal created by the noise() function can be adapted to
             fit very specific needs and characteristics.
             </summary>
             <param name="lod">int: number of octaves to be used by the noise</param>
             <param name="falloff">float: falloff factor for each octave</param>
        </member>
        <member name="M:Monogame.Processing.Processing.noiseDetail(System.Int32)">
             <summary>
             Adjusts the character and level of detail produced by the Perlin noise function. Similar
             to harmonics in physics, noise is computed over several octaves. Lower octaves contribute
             more to the output signal and as such define the overall intensity of the noise, whereas
             higher octaves create finer-grained details in the noise sequence.
            
             By default, noise is computed over 4 octaves with each octave contributing exactly half
             than its predecessor, starting at 50% strength for the first octave.This falloff amount
             can be changed by adding an additional function parameter.For example, a falloff factor
             of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave.
             While any number between 0.0 and 1.0 is valid, note that values greater than 0.5 may result
             in noise() returning values greater than 1.0.
            
             By changing these parameters, the signal created by the noise() function can be adapted to
             fit very specific needs and characteristics.
             </summary>
             <param name="lod">int: number of octaves to be used by the noise</param>
        </member>
        <member name="M:Monogame.Processing.Processing.noiseSeed(System.Int32)">
            <summary>
            Sets the seed value for noise(). By default, noise() produces different results each
            time the program is run. Set the seed parameter to a constant to return the same
            pseudo-random numbers each time the software is run.
            </summary>
            <param name="seed">int: seed value</param>
        </member>
        <member name="M:Monogame.Processing.Processing.rotate(System.Single)">
            <summary>
            Rotates the amount specified by the angle parameter. Angles must be specified 
            in radians (values from 0 to TWO_PI), or they can be converted from degrees 
            to radians with the radians() function. 
            </summary>
            <param name="angle">float: angle of rotation specified in radians</param>
        </member>
        <member name="M:Monogame.Processing.Processing.scale(System.Single)">
            <summary>
            Increases or decreases the size of a shape by expanding and contracting vertices. 
            Objects always scale from their relative origin to the coordinate system. TransformMat 
            values are specified as decimal percentages. For example, the function call scale(2.0) 
            increases the dimension of a shape by 200%.
            </summary>
            <param name="s">float: percentage to scale the object</param>
        </member>
        <member name="M:Monogame.Processing.Processing.scale(System.Single,System.Single)">
            <summary>
            Increases or decreases the size of a shape by expanding and contracting vertices. 
            Objects always scale from their relative origin to the coordinate system. TransformMat 
            values are specified as decimal percentages. For example, the function call scale(2.0) 
            increases the dimension of a shape by 200%. 
            </summary>
            <param name="x">float: percentage to scale the object in the x-axis</param>
            <param name="y">float: percentage to scale the object in the y-axis</param>
        </member>
        <member name="M:Monogame.Processing.Processing.translate(System.Single,System.Single)">
             <summary>
             Specifies an amount to displace objects within the display window. The x parameter specifies
             left/right translation, the y parameter specifies up/down translation, and the z parameter
             specifies translations toward/away from the screen. Using this function with the z parameter
             requires using P3D as a parameter in combination with size as shown in the above example.
            
             Transformations are cumulative and apply to everything that happens after and subsequent calls
             to the function accumulates the effect.For example, calling translate(50, 0) and then translate(20, 0)
             is the same as translate(70, 0). If translate() is called within draw(), the transformation is reset when
             the loop begins again.This function can be further controlled by using pushMatrix() and popMatrix().
             </summary>
             <param name="x">float: left/right translation</param>
             <param name="y">float: up/down translation</param>
        </member>
        <member name="M:Monogame.Processing.Processing.shearY(System.Single)">
             <summary>
             Shears a shape around the y-axis the amount specified by the angle parameter. Angles should be specified in
             radians (values from 0 to PI*2) or converted to radians with the radians() function. Objects are always sheared
             around their relative position to the origin and positive numbers shear objects in a clockwise direction.
             Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.
             For example, calling shearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If shearY() is called within the
             draw(), the transformation is reset when the loop begins again.
            
             Technically, shearY() multiplies the current transformation matrix by a rotation matrix.This function can be further
             controlled by the pushMatrix() and popMatrix() functions.
             </summary>
             <param name="angle">float: angle of shear specified in radians</param>
        </member>
        <member name="M:Monogame.Processing.Processing.shearX(System.Single)">
             <summary>
             Shears a shape around the x-axis the amount specified by the angle parameter. Angles should be specified in
             radians (values from 0 to PI*2) or converted to radians with the radians() function. Objects are always sheared
             around their relative position to the origin and positive numbers shear objects in a clockwise direction.
             Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.
             For example, calling shearX(PI/2) and then shearX(PI/2) is the same as shearX(PI). If shearX() is called within the
             draw(), the transformation is reset when the loop begins again.
            
             Technically, shearX() multiplies the current transformation matrix by a rotation matrix.This function can be further
             controlled by the pushMatrix() and popMatrix() functions.
             </summary>
             <param name="angle"></param>
        </member>
        <member name="M:Monogame.Processing.Processing.acos(System.Single)">
            <summary>
            The inverse of cos(), returns the arc cosine of a value. 
            This function expects the values in the range of -1 to 1 and 
            values are returned in the range 0 to PI (3.1415927).
            </summary>
            <param name="value">float: the value whose arc cosine is to be returned</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.asin(System.Single)">
            <summary>
            The inverse of sin(), returns the arc sine of a value. 
            This function expects the values in the range of -1 to 1 and 
            values are returned in the range -PI/2 to PI/2.
            </summary>
            <param name="value">	float: the value whose arc sine is to be returned</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.atan(System.Single)">
            <summary>
            The inverse of tan(), returns the arc tangent of a value. 
            This function expects the values in the range of -Infinity to 
            Infinity (exclusive) and values are returned in the range -PI/2 to PI/2.
            </summary>
            <param name="value">float: -Infinity to Infinity (exclusive)</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.atan2(System.Single,System.Single)">
            <summary>
            Calculates the angle (in radians) from a specified point to the coordinate 
            origin as measured from the positive x-axis. Values are returned as a float 
            in the range from PI to -PI. The atan2() function is most often used for orienting 
            geometry to the position of the cursor. Note: The y-coordinate of the point is the 
            first parameter, and the x-coordinate is the second parameter, due the the 
            structure of calculating the tangent.
            </summary>
            <param name="y">float: y-coordinate of the point</param>
            <param name="x">float: x-coordinate of the point</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.cos(System.Single)">
            <summary>
            Calculates the cosine of an angle. This function expects the values of the angle 
            parameter to be provided in radians (values from 0 to PI*2). Values are returned 
            in the range -1 to 1.
            </summary>
            <param name="angle">float: an angle in radians</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.sin(System.Single)">
            <summary>
            Calculates the sine of an angle. This function expects the values of the angle 
            parameter to be provided in radians (values from 0 to 6.28). Values are returned 
            in the range -1 to 1.
            </summary>
            <param name="angle">float: an angle in radians</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.tan(System.Single)">
            <summary>
            Calculates the ratio of the sine and cosine of an angle. This function expects 
            the values of the angle parameter to be provided in radians (values from 0 to PI*2). 
            Values are returned in the range infinity to -infinity.
            </summary>
            <param name="angle">float: an angle in radians</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.degrees(System.Single)">
            <summary>
            Converts a radian measurement to its corresponding value in degrees. 
            Radians and degrees are two ways of measuring the same thing. There are 
            360 degrees in a circle and 2*PI radians in a circle. For example, 
            90° = PI/2 = 1.5707964. All trigonometric functions in Processing require 
            their parameters to be specified in radians.
            </summary>
            <param name="radians">float: radian value to convert to degrees</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Processing.radians(System.Single)">
            <summary>
            Converts a degree measurement to its corresponding value in radians. 
            Radians and degrees are two ways of measuring the same thing. There are 
            360 degrees in a circle and 2*PI radians in a circle. For example, 
            90° = PI/2 = 1.5707964. All trigonometric functions in Processing require 
            their parameters to be specified in radians.
            </summary>
            <param name="degrees">float: degree value to convert to radians</param>
            <returns>float</returns>
        </member>
        <member name="M:Monogame.Processing.Sound.Generator.play">
            <summary>
            Starts the oscillator
            </summary>
        </member>
        <member name="M:Monogame.Processing.Sound.Generator.set(System.Single,System.Single,System.Single)">
            <summary>
            Set multiple parameters at once
            </summary>
            <param name="freq"></param>
            <param name="amp"></param>
            <param name="add"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Monogame.Processing.Sound.Generator.amp(System.Single)">
            <summary>
            Change the amplitude/volume of this sound.
            </summary>
            <param name="amp"></param>
        </member>
        <member name="M:Monogame.Processing.Sound.Generator.add(System.Single)">
            <summary>
            Offset the output of this generator by given value
            </summary>
            <param name="add"></param>
        </member>
        <member name="M:Monogame.Processing.Sound.Generator.pan(System.Single)">
            <summary>
            Move the sound in a stereo panorama.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Monogame.Processing.Sound.Generator.stop">
            <summary>
            Stop the oscillator.
            </summary>
        </member>
        <member name="M:Monogame.Processing.Sound.Oscilator.set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set multiple parameters at once
            </summary>
            <param name="freq"></param>
            <param name="amp"></param>
            <param name="add"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Monogame.Processing.Sound.Oscilator.freq(System.Single)">
            <summary>
            Set the frequency of the oscillator in Hz.
            </summary>
            <param name="freq"></param>
        </member>
    </members>
</doc>
